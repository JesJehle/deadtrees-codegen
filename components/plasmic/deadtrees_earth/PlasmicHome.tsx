// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ezXstb24MmF1SndvtETBh2
// Component: V2ZdT_462bKN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button2 from "../../Button2"; // plasmic-import: Wg_7eiARuB6m/component
import TextInput from "../../TextInput"; // plasmic-import: z6aQVs0Jm6At/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsrjZSpUa3IUKi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: RjZSpUA3iUKi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_deadtrees_earth.module.css"; // plasmic-import: ezXstb24MmF1SndvtETBh2/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: V2ZdT_462bKN/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: EayiobTyFOwB/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: sZZ7QXNWz3Np/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 8OSmlHwReZ8C/icon
import OpenAccessSvgrepoComsvgIcon from "./icons/PlasmicIcon__OpenAccessSvgrepoComsvg"; // plasmic-import: DDTC_jpsmAfb/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: O98JeLQEeDqz/icon
import AiSvgrepoComsvgIcon from "./icons/PlasmicIcon__AiSvgrepoComsvg"; // plasmic-import: LQ7kdyZR99bt/icon
import MapSvgrepoComsvgIcon from "./icons/PlasmicIcon__MapSvgrepoComsvg"; // plasmic-import: KupJA1ebzWwt/icon
import DataSvgrepoComsvgIcon from "./icons/PlasmicIcon__DataSvgrepoComsvg"; // plasmic-import: sb0sh_d4ww7R/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  foreground?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  message?: Flex__<"div">;
  error?: Flex__<"div">;
  columns?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  foreground3?: Flex__<"div">;
  h2?: Flex__<"h2">;
  foreground2?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  ul?: Flex__<"ul">;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "showMessage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showError",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsrjZSpUa3IUKi()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHome.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHome.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHome.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHome.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHome.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHome.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pWuTb)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__v0ViJ)}>
              <div className={classNames(projectcss.all, sty.freeBox__b1Hz3)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wVh15)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/deadtrees_earth/images/baumpng.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ew96M
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"deadtrees.earth"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__j4PlU)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bOrTc
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecorationLine: "underline" }}
                    >
                      {"Home"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e8Olu
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToAccount"] = true
                      ? (() => {
                          const actionArgs = { destination: `/account` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAccount"] != null &&
                      typeof $steps["goToAccount"] === "object" &&
                      typeof $steps["goToAccount"].then === "function"
                    ) {
                      $steps["goToAccount"] = await $steps["goToAccount"];
                    }
                  }}
                >
                  {"Account"}
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v44Qg)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__mk1Xe)}
                  link={`/account`}
                  size={"compact"}
                >
                  {"Sign Up"}
                </Button2>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground"}
              data-plasmic-override={overrides.foreground}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fYlxc)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__b1Wn)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qsweh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vxfIa
                      )}
                    >
                      {"Coming Soon"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b4F
                    )}
                  >
                    {"deadtrees.earth"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__el6Gq
                    )}
                  >
                    {
                      "An open database for accessing, contributing, analyzing, and visualizing remote sensing-based tree mortality data."
                    }
                  </div>
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__yltlN)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__meW5Y
                    )}
                  >
                    {"Get notified as soon as the service is up and running."}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yBt1L)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};
                        }).apply(null, eventArgs);
                      }}
                      placeholder={"Enter email\u2026"}
                      type={"email"}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__wDBwQ
                      )}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__drgDi)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["airtableCreate"] =
                          /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(
                            $state.textInput.value
                          )
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "cBjDXJpekyMUcPbiZQZqB9",
                                    opId: "ba5975ef-9dc7-45f1-b7a2-05c9162053ff",
                                    userArgs: {
                                      variables: [$state.textInput.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["airtableCreate"] != null &&
                          typeof $steps["airtableCreate"] === "object" &&
                          typeof $steps["airtableCreate"].then === "function"
                        ) {
                          $steps["airtableCreate"] = await $steps[
                            "airtableCreate"
                          ];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const isValidEmail =
                                      /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(
                                        $state.textInput.value
                                      );
                                    if (isValidEmail) {
                                      $state.showMessage = true;
                                      setTimeout(() => {
                                        $state.showMessage = false;
                                      }, 5000);
                                    } else {
                                      $state.showError = true;
                                      setTimeout(() => {
                                        $state.showError = false;
                                      }, 5000);
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["runInteractionProp"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runInteractionProp"] != null &&
                          typeof $steps["runInteractionProp"] === "object" &&
                          typeof $steps["runInteractionProp"].then ===
                            "function"
                        ) {
                          $steps["runInteractionProp"] = await $steps[
                            "runInteractionProp"
                          ];
                        }
                      }}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__bFWh)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vethI
                        )}
                      >
                        {"get notified ->"}
                      </div>
                    </Button2>
                  </Stack__>
                </div>
                {(() => {
                  try {
                    return $state.showMessage;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"message"}
                    data-plasmic-override={overrides.message}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.message
                    )}
                  >
                    {"Thank you for your interest! We will keep you updated."}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.showError;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"error"}
                    data-plasmic-override={overrides.error}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.error
                    )}
                  >
                    {"Please enter a valid email address"}
                  </div>
                ) : null}
              </Stack__>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__p3UD6)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "220px"
                    : "355px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : "350px"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100%"
                    : "50%"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/deadtrees_earth/images/websiteLogopng.png",
                  fullWidth: 1634,
                  fullHeight: 1572,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__pv1Up)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ilnxr
                )}
              >
                {"current status"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1TYvh
                )}
              >
                {"Just the beginning"}
              </div>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__nT0N)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fC4Rf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___82Akp
                      )}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___9CYcS
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "24k"
                          : "24 555"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8ANge
                        )}
                      >
                        {"ha"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vqms7
                      )}
                    >
                      {"Area covered"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__pjj66)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oWwbE)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kWszc)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__nl4UT
                        )}
                      >
                        {"421"}
                      </h3>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gd3Pn
                      )}
                    >
                      {"Orthophotos"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__e850K)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ww8Pi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y76X)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___62XNv
                        )}
                      >
                        {"16"}
                      </h3>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8PFlt
                      )}
                    >
                      {"Countries"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__okqWe)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bA7B7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n1Swl)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__e0GfX
                        )}
                      >
                        {"29"}
                      </h3>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q5WPa
                      )}
                    >
                      {"Contributors"}
                    </div>
                  </div>
                </div>
              </div>
              {(() => {
                const child$Props = {
                  adaptiveHeight: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? true
                    : false,
                  arrowColor: true ? "var(--antd-colorPrimary)" : undefined,
                  arrows: hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true,
                  beforeChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "currentSlide",
                    ["sliderCarousel", "currentSlide"],
                    SliderWrapper_Helpers
                  ),
                  centerMode: hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : false,
                  centerPadding: "0",
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  dots: hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : true,
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  rows: 1,
                  sliderScopeClassName: sty["sliderCarousel__slider"],
                  slidesPerRow: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? 1
                    : 3,
                  slidesToScroll: 1,
                  speed: 1000,
                  swipeToSlide: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? false
                    : undefined,
                  variableWidth: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  )
                    ? false
                    : undefined,
                  vertical: hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : undefined
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sHlHy)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___6P0O6)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image2Png.png",
                          fullWidth: 1638,
                          fullHeight: 1638,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8KGn6
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__tQGi)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image3Png2.png",
                          fullWidth: 785,
                          fullHeight: 785,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__slBq0)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__n0Dc9)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image4Png.png",
                          fullWidth: 1106,
                          fullHeight: 1106,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2RUq2
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__qcQpY)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image5Png.png",
                          fullWidth: 1467,
                          fullHeight: 1467,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lNep3)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__dqJ2B)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image6Png2.png",
                          fullWidth: 1058,
                          fullHeight: 1058,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ct7E1)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___2W4Hn)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image7Png.png",
                          fullWidth: 1059,
                          fullHeight: 1059,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qta7C)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__teJuy)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image8Png.png",
                          fullWidth: 1583,
                          fullHeight: 1583,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mbToM)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___2BHAo)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image9Png2.png",
                          fullWidth: 1044,
                          fullHeight: 1044,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eiMr4)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hGsYw)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image10Png2.png",
                          fullWidth: 1262,
                          fullHeight: 1262,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__d6El9)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hDdrH)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image11Png.png",
                          fullWidth: 1329,
                          fullHeight: 1329,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__euctx)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___8Adzs)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image12Png.png",
                          fullWidth: 1367,
                          fullHeight: 1367,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qNts)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___9Pu5X)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image13Png2.png",
                          fullWidth: 1280,
                          fullHeight: 1280,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a48A)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ad59X)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image14Png.png",
                          fullWidth: 1544,
                          fullHeight: 1544,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gcakQ)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__tKox6)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image15Png.png",
                          fullWidth: 1355,
                          fullHeight: 1355,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iDe9S)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__esiI5)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image16Png.png",
                          fullWidth: 1696,
                          fullHeight: 1696,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sNbQi)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___9Nixc)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image17Png.png",
                          fullWidth: 1410,
                          fullHeight: 1410,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jyuH)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__rDk9)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image18Png2.png",
                          fullWidth: 1542,
                          fullHeight: 1542,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h3YMl)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__pKv9Q)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image19Png.png",
                          fullWidth: 1541,
                          fullHeight: 1541,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__afJgd)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__lzoen)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image20Png.png",
                          fullWidth: 1079,
                          fullHeight: 1079,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1QE4U
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__tbO4O)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image1Png.png",
                          fullWidth: 1407,
                          fullHeight: 1407,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h9SZr)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__awqZ)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        src={{
                          src: "/plasmic/deadtrees_earth/images/image21Png.png",
                          fullWidth: 1324,
                          fullHeight: 1324,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </SliderWrapper>
                );
              })()}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vGhBc)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__flte6)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cx11E
                    )}
                  >
                    {"our services to the community"}
                  </div>
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {"Revealing tree mortality patterns"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bw5Ue
                    )}
                  >
                    {
                      "By integrating Earth observation, machine learning, and ground-based data sources, this initiative aims to bridge the existing gaps in understanding global tree mortality dynamics, fostering a comprehensive and accessible resource for researchers and stakeholders alike."
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"foreground2"}
                  data-plasmic-override={overrides.foreground2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground2)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6NgIb)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mZNgm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pQaCm
                        )}
                      >
                        <OpenAccessSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__nJ32W)}
                          role={"img"}
                        />
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mvyEl
                          )}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fP6O9
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lbbFa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gOj43
                          )}
                        >
                          {"Open access community effort"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nyKDg
                          )}
                        >
                          {
                            "Upload and download your aerial imagery with optional delineations of standing deadwood. \nEvery contributor will be credited and invited to collaborate."
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zeReq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aXRaG
                        )}
                      >
                        <AiSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__oydL8)}
                          role={"img"}
                        />
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9BfVi
                          )}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5Wbyv
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vglxg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s700T
                          )}
                        >
                          {"Automatic dead tree detection"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aFe2G
                          )}
                        >
                          {
                            "Automatic detection (semantic segmentation) of dead trees in uploaded aerial imagery through a generic detection computer vision model."
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sWJdA)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dUkVs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bsNzB
                        )}
                      >
                        <MapSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__mz2Ur)}
                          role={"img"}
                        />
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i7Xl0
                          )}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zM7Xb
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bJsbf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Un1I
                          )}
                        >
                          {"Large-scale tree mortality map"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8WhQd
                          )}
                        >
                          {
                            "Embedded visualization and download of extensive spatiotemporal tree mortality products derived from extrapolating standing deadwood using Earth observation data."
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ejVya)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dv1Y
                        )}
                      >
                        <DataSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__qk05L)}
                          role={"img"}
                        />
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tzfjg
                          )}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s2WYi
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eMcmU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zWiF
                          )}
                        >
                          {"Analysis ready training data"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lVndB
                          )}
                        >
                          {
                            "High-resolution aerial imagery of forests worldwide together with delineated standing deadwood which can be used for training your own AI models."
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__hmAet)}>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__jgI52
                )}
              >
                {"Want to join?"}
              </h4>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__etxto
                )}
              >
                {
                  "Do you have high-resolution (<20cm) orthoimagery and would like to participate in this project?"
                }
              </div>
              <Button2
                className={classNames("__wab_instance", sty.button2__rYXqv)}
                link={
                  "mailto:teja.kattenborn@geosense.uni-freiburg.de;janusch.jehle@felis.uni-freiburg.de;clemens.mosig@uni-leipzig.de"
                }
                onClick={async event => {
                  const $steps = {};
                }}
                target={true}
              >
                {"Get in touch"}
              </Button2>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___7Hbq7)}>
              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__l8Yea
                )}
              >
                {"Frequently Asked Questions"}
              </h4>
              {(() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion",
                    "activePanelId"
                  ]),
                  bordered: false,
                  className: classNames("__wab_instance", sty.accordion),
                  ghost: true,
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___2JSdn
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qAhr
                            )}
                          >
                            {"Who we are"}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j7QAi
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "This initiative is being led by Teja Kattenborn from "
                              }
                            </React.Fragment>
                            {
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link__g2W5K
                                )}
                                component={Link}
                                href={"https://geosense.uni-freiburg.de/en"}
                                platform={"nextjs"}
                              >
                                {"geosense"}
                              </PlasmicLink__>
                            }
                            <React.Fragment>
                              {" and Clemens Mosig from "}
                            </React.Fragment>
                            {
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link__mfvQ
                                )}
                                component={Link}
                                href={"https://rsc4earth.de/"}
                                platform={"nextjs"}
                              >
                                {"RSC4Earth"}
                              </PlasmicLink__>
                            }
                            <React.Fragment>{" / "}</React.Fragment>
                            {
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link___6YDh
                                )}
                                component={Link}
                                href={"https://scads.ai/"}
                                platform={"nextjs"}
                              >
                                {"ScaDS.AI"}
                              </PlasmicLink__>
                            }
                            <React.Fragment>
                              {" and the service is being built by "}
                            </React.Fragment>
                            {
                              <PlasmicLink__
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link__lhVc6
                                )}
                                component={Link}
                                href={"https://hydrocode.de/home"}
                                platform={"nextjs"}
                              >
                                {"hydrocode."}
                              </PlasmicLink__>
                            }
                            <React.Fragment>
                              {"\n\nData Contributors and collaborators:\n"}
                            </React.Fragment>
                            {
                              <ul
                                data-plasmic-name={"ul"}
                                data-plasmic-override={overrides.ul}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.ul,
                                  sty.ul
                                )}
                              >
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li___5CKgu
                                  )}
                                >
                                  {"Alfred Wegner Institute (Stefan Kruse)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__yNo47
                                  )}
                                >
                                  {"ETH Zurich (Mirela Beloiu)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__lacTt
                                  )}
                                >
                                  {
                                    "Forest Research Institute (Katarzyna Zielewska-B\u00fcttner, Selina Ganz)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__zZset
                                  )}
                                >
                                  {"Freie University Berlin (Fabian Fassnacht)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__wu8T6
                                  )}
                                >
                                  {
                                    "K. N. Toosi University of Technology (Hooman Latifi)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__dhZOi
                                  )}
                                >
                                  {
                                    "Karlsruhe Institute of Technology (Elham Shafeian, Felix Schiefer)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__vhAyl
                                  )}
                                >
                                  {
                                    "Luftbild Umwelt Planung GmbH (Annett Frick)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__fEjOj
                                  )}
                                >
                                  {
                                    "Nanjing Normal University (Qin Ma, Yanjun Su)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__e5Eet
                                  )}
                                >
                                  {"Nelson Mandela University (Alastair Potts)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__zcNqi
                                  )}
                                >
                                  {"Oak Ridge National Laboratory (KC Cushman)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__gdgzz
                                  )}
                                >
                                  {"Potsdam University (Marie-Therese-Schmehl)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__qqhY2
                                  )}
                                >
                                  {"Purdue University (Joseph Hupy)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li___5Jzw0
                                  )}
                                >
                                  {
                                    "Smithsonian Tropical Research Institute (Helene-M\u00fcller-Landau)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__nBuGt
                                  )}
                                >
                                  {"Swiss National Park (Andreas Uhl)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__rqJsb
                                  )}
                                >
                                  {
                                    "Universidad Adolfo Ib\u00e1\u00f1ez (Javier Lopatin)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__oBnqs
                                  )}
                                >
                                  {"University of Cordoba (Oscar Perez Priego)"}
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__fvZmG
                                  )}
                                >
                                  {
                                    "University of Denmark (Yan Cheng, St\u00e9phanie Horion)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__e4825
                                  )}
                                >
                                  {
                                    "University of Eastern Finland (Samuli Junttila)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__aouOm
                                  )}
                                >
                                  {
                                    "University of Freiburg (Teja Kattenborn, Julian Frey)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__esoHl
                                  )}
                                >
                                  {
                                    "University of Leipzig (Clemens Mosig, Miguel Mahecha)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li__cj7G
                                  )}
                                >
                                  {
                                    "University of Washington (Pratima Khatri-Chhetri)"
                                  }
                                </li>
                                <li
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.li,
                                    projectcss.__wab_text,
                                    sty.li___8Wmdt
                                  )}
                                >
                                  {
                                    "Universit\u00e9 de Montr\u00e9al (Myriam Cloutier, Etienne Lalibert\u00e9)"
                                  }
                                </li>
                              </ul>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___2TVoe
                        )}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eUn1L
                            )}
                          >
                            {"What happens to the data after your upload?"}
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oeCk9
                          )}
                        >
                          {
                            "The data is used to train multiple models related to standing deadwood. If you agree, we will also make your data publicly available to the community under a chosen Creative Commons license."
                          }
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion", "activePanelId"],
                    AntdAccordion_Helpers
                  ),
                  size: "large"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion"}
                    data-plasmic-override={overrides.accordion}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xTAj)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__mteNb
                )}
                component={Link}
                href={`/datenschutz`}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToNewPage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/datenschutz` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToNewPage"] != null &&
                    typeof $steps["goToNewPage"] === "object" &&
                    typeof $steps["goToNewPage"].then === "function"
                  ) {
                    $steps["goToNewPage"] = await $steps["goToNewPage"];
                  }
                }}
                platform={"nextjs"}
              >
                {"Datenschutzerkl\u00e4rung"}
              </PlasmicLink__>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground",
    "textInput",
    "message",
    "error",
    "columns",
    "sliderCarousel",
    "foreground3",
    "h2",
    "foreground2",
    "accordion",
    "ul"
  ],
  foreground: ["foreground", "textInput", "message", "error"],
  textInput: ["textInput"],
  message: ["message"],
  error: ["error"],
  columns: ["columns"],
  sliderCarousel: ["sliderCarousel"],
  foreground3: ["foreground3", "h2"],
  h2: ["h2"],
  foreground2: ["foreground2"],
  accordion: ["accordion", "ul"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground: "div";
  textInput: typeof TextInput;
  message: "div";
  error: "div";
  columns: "div";
  sliderCarousel: typeof SliderWrapper;
  foreground3: "div";
  h2: "h2";
  foreground2: "div";
  accordion: typeof AntdAccordion;
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"ezXstb24MmF1SndvtETBh2"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "ezXstb24MmF1SndvtETBh2"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),
    textInput: makeNodeComponent("textInput"),
    message: makeNodeComponent("message"),
    error: makeNodeComponent("error"),
    columns: makeNodeComponent("columns"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    foreground3: makeNodeComponent("foreground3"),
    h2: makeNodeComponent("h2"),
    foreground2: makeNodeComponent("foreground2"),
    accordion: makeNodeComponent("accordion"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "deadtrees.earth",
      description:
        "An open database for accessing, contributing, analyzing, and visualizing remote sensing-based tree mortality data.",
      ogImageSrc:
        "https://site-assets.plasmic.app/e3258f50910cd29de592548caa08e8be.png",
      canonical: "https://www.deadtrees.earth/"
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
