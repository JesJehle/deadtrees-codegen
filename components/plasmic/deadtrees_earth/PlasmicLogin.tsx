// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ezXstb24MmF1SndvtETBh2
// Component: K7uozXWus1-C

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import TextInput from "../../TextInput"; // plasmic-import: z6aQVs0Jm6At/component
import Button2 from "../../Button2"; // plasmic-import: Wg_7eiARuB6m/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_deadtrees_earth.module.css"; // plasmic-import: ezXstb24MmF1SndvtETBh2/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: K7uozXWus1-C/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 1fFBZhgtjE9c/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 8OSmlHwReZ8C/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: EayiobTyFOwB/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: sZZ7QXNWz3Np/icon
import SocialIconsvgIcon from "./icons/PlasmicIcon__SocialIconsvg"; // plasmic-import: 8x4uvJypKM6j/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  h3?: Flex__<"h3">;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
};

export interface DefaultLoginProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yvNkr)}
            >
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__yifxv)}
                role={"img"}
              />

              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {"Create an account"}
              </h3>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cxsLw
                )}
              >
                {"Come On it's free"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7RNxK)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kn2K9
                  )}
                >
                  {"Name"}
                </div>
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  aria-label={``}
                  className={classNames("__wab_instance", sty.textInput)}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"Enter your name"}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["textInput", "value"]) ?? ""
                  }
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rqkcn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2JmY2
                  )}
                >
                  {"Email"}
                </div>
                <TextInput
                  data-plasmic-name={"textInput2"}
                  data-plasmic-override={overrides.textInput2}
                  aria-label={``}
                  className={classNames("__wab_instance", sty.textInput2)}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"Enter your name"}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["textInput2", "value"]) ??
                    ""
                  }
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nw4Jh)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n5TH
                  )}
                >
                  {"Password"}
                </div>
                <TextInput
                  data-plasmic-name={"textInput3"}
                  data-plasmic-override={overrides.textInput3}
                  aria-label={``}
                  className={classNames("__wab_instance", sty.textInput3)}
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput3", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"Enter your name"}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["textInput3", "value"]) ??
                    ""
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kFzRo
                  )}
                >
                  {"Must be at least 8 characters."}
                </div>
              </Stack__>
              <Button2
                className={classNames("__wab_instance", sty.button2__xboNd)}
                onClick={async event => {
                  const $steps = {};

                  $steps["logIn"] = true
                    ? (() => {
                        const actionArgs = { continueTo: `/account` };
                        return (async ({ continueTo }) => {
                          function uuidv4() {
                            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(
                              /[018]/g,
                              c =>
                                (
                                  c ^
                                  (crypto.getRandomValues(
                                    new Uint8Array(1)
                                  )[0] &
                                    (15 >> (c / 4)))
                                ).toString(16)
                            );
                          }

                          async function sha256(text) {
                            const encoder = new TextEncoder();
                            const data = encoder.encode(text);
                            const hashBuffer = await crypto.subtle.digest(
                              "SHA-256",
                              data
                            );
                            const hashArray = Array.from(
                              new Uint8Array(hashBuffer)
                            );
                            const hashHex = hashArray
                              .map(b => b.toString(16).padStart(2, "0"))
                              .join("");
                            return hashHex;
                          }

                          const state = JSON.stringify({
                            continueTo: continueTo || window.location.href
                          });
                          const code_verifier = uuidv4();
                          localStorage.setItem("code_verifier", code_verifier);
                          const code_challenge = await sha256(code_verifier);

                          const params = new URLSearchParams();
                          params.set("client_id", "ezXstb24MmF1SndvtETBh2");
                          params.set("state", state);
                          params.set("response_type", "code");
                          params.set("code_challenge", code_challenge);
                          params.set("code_challenge_method", "S256");
                          params.set("origin_host", window.location.host);

                          if (dataSourcesCtx?.authRedirectUri) {
                            params.set(
                              "redirect_uri",
                              dataSourcesCtx.authRedirectUri
                            );
                          }

                          if (window.__PLASMIC_AUTH_OVERRIDE) {
                            window.__PLASMIC_AUTH_OVERRIDE();
                          } else {
                            const url = `https://studio.plasmic.app/authorize?${params.toString()}`;
                            window.location.assign(url);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["logIn"] != null &&
                    typeof $steps["logIn"] === "object" &&
                    typeof $steps["logIn"].then === "function"
                  ) {
                    $steps["logIn"] = await $steps["logIn"];
                  }

                  $steps["updateTextInputValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["textInput", "value"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTextInputValue"] != null &&
                    typeof $steps["updateTextInputValue"] === "object" &&
                    typeof $steps["updateTextInputValue"].then === "function"
                  ) {
                    $steps["updateTextInputValue"] = await $steps[
                      "updateTextInputValue"
                    ];
                  }
                }}
              >
                {"Get Started"}
              </Button2>
              <div className={classNames(projectcss.all, sty.freeBox__cTkcA)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__lk3D)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mdhQ2
                  )}
                >
                  {"OR"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__qLeSo)}
                />
              </div>
              <Button2
                className={classNames("__wab_instance", sty.button2__ikaY2)}
                color={"white"}
                showStartIcon={true}
                startIcon={
                  <SocialIconsvgIcon
                    className={classNames(projectcss.all, sty.svg__uftv)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fh7Yj
                  )}
                >
                  {"Sign up with Google"}
                </div>
              </Button2>
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "h3", "textInput", "textInput2", "textInput3"],
  section: ["section", "h3", "textInput", "textInput2", "textInput3"],
  h3: ["h3"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h3: "h3";
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"ezXstb24MmF1SndvtETBh2"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "ezXstb24MmF1SndvtETBh2"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h3: makeNodeComponent("h3"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
