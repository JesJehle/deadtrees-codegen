// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ezXstb24MmF1SndvtETBh2
// Component: 85uUpz9C3aXZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { CustomUpload } from "../../CustomUpload"; // plasmic-import: wYAPpfUrJlKQ/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import Button2 from "../../Button2"; // plasmic-import: Wg_7eiARuB6m/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_deadtrees_earth.module.css"; // plasmic-import: ezXstb24MmF1SndvtETBh2/projectcss
import sty from "./PlasmicAccount.module.css"; // plasmic-import: 85uUpz9C3aXZ/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: EayiobTyFOwB/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: sZZ7QXNWz3Np/icon

createPlasmicElementProxy;

export type PlasmicAccount__VariantMembers = {};
export type PlasmicAccount__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccount__VariantsArgs;
export const PlasmicAccount__VariantProps = new Array<VariantPropType>();

export type PlasmicAccount__ArgsType = {};
type ArgPropType = keyof PlasmicAccount__ArgsType;
export const PlasmicAccount__ArgProps = new Array<ArgPropType>();

export type PlasmicAccount__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  customUpload?: Flex__<typeof CustomUpload>;
  upload?: Flex__<typeof UploadWrapper>;
  button?: Flex__<typeof AntdButton>;
  dateTimePicker?: Flex__<typeof AntdDatePicker>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  button2?: Flex__<typeof Button2>;
};

export interface DefaultAccountProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccount__RenderFunc(props: {
  variants: PlasmicAccount__VariantsArgs;
  args: PlasmicAccount__ArgsType;
  overrides: PlasmicAccount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "cc_by"
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "drone"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getImagesFromUser: usePlasmicDataOp(() => {
      return {
        sourceId: "nyY77sgADoaSurJNcDofzi",
        opId: "0000d3ad-7ea6-48e5-83e3-97da7fcafacf",
        userArgs: {},
        cacheKey: `plasmic.$.0000d3ad-7ea6-48e5-83e3-97da7fcafacf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            maskClosable={false}
            modalScopeClassName={sty["modal__modal"]}
            onOk={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $ctx.FileUploaded.uid;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return $ctx.FileUploaded.content;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions[
                      "CustomActions.firebaseUpload"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["postgresCreate"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "nyY77sgADoaSurJNcDofzi",
                        opId: "5c103756-a163-40d9-8f45-09f04b3b2b45",
                        userArgs: {
                          variables: [
                            $state.dateTimePicker.value,
                            $ctx.FileUploaded.uid,
                            $ctx.FileUploaded.name,
                            $ctx.FileUploaded.size,
                            $ctx.FileUploaded.type,
                            $state.radioGroup.value,
                            $state.radioGroup2.value
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      },
                      continueOnError: false
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["postgresCreate"] != null &&
                typeof $steps["postgresCreate"] === "object" &&
                typeof $steps["postgresCreate"].then === "function"
              ) {
                $steps["postgresCreate"] = await $steps["postgresCreate"];
              }

              $steps["updateUploadFiles"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["upload", "files"]
                      },
                      operation: 1
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, undefined);
                      return undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUploadFiles"] != null &&
                typeof $steps["updateUploadFiles"] === "object" &&
                typeof $steps["updateUploadFiles"].then === "function"
              ) {
                $steps["updateUploadFiles"] = await $steps["updateUploadFiles"];
              }

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: ["plasmic_refresh_all"]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }
            }}
            onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={"Image Upload"}
            trigger={null}
            width={``}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1LPgs)}
            >
              <CustomUpload
                data-plasmic-name={"customUpload"}
                data-plasmic-override={overrides.customUpload}
                className={classNames("__wab_instance", sty.customUpload)}
              />

              <UploadWrapper
                data-plasmic-name={"upload"}
                data-plasmic-override={overrides.upload}
                accept={"image/*"}
                className={classNames("__wab_instance", sty.upload)}
                dragAndDropFiles={true}
                files={generateStateValueProp($state, ["upload", "files"])}
                listType={"text"}
                multiple={false}
                onFilesChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["upload", "files"]).apply(
                    null,
                    eventArgs
                  );
                  (async files => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                }}
                showUploadList={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fEsF
                  )}
                >
                  {"Drag image file here"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ea0Np
                  )}
                >
                  {"or"}
                </div>
                <AntdButton
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gBkLk
                    )}
                  >
                    {"Upload"}
                  </div>
                </AntdButton>
              </UploadWrapper>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5XChR)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__warfh
                  )}
                >
                  {"Acquisition Date"}
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.dateTimePicker),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["dateTimePicker", "value"],
                      AntdDatePicker_Helpers
                    ),
                    popupScopeClassName: sty["dateTimePicker__datePickerPopup"],
                    value: generateStateValueProp($state, [
                      "dateTimePicker",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "dateTimePicker.value"
                      }
                    ],
                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdDatePicker
                      data-plasmic-name={"dateTimePicker"}
                      data-plasmic-override={overrides.dateTimePicker}
                      {...child$Props}
                    />
                  );
                })()}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zWmho)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jhY66
                  )}
                >
                  {"Platform"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"radioGroup2"}
                  data-plasmic-override={overrides.radioGroup2}
                  className={classNames("__wab_instance", sty.radioGroup2)}
                  defaultValue={"drone"}
                  onChange={generateStateOnChangeProp($state, [
                    "radioGroup2",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["value"] = "drone";
                    __composite["0"]["label"] = "drone";
                    __composite["1"]["value"] = "airborne";
                    __composite["1"]["label"] = "ariborne";
                    __composite["2"]["value"] = "satellite";
                    __composite["2"]["label"] = "satellite";
                    return __composite;
                  })()}
                  value={generateStateValueProp($state, [
                    "radioGroup2",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___51Zw)}
                    value={"op1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z2P8Q
                      )}
                    >
                      {"Option 1"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__an1Ri)}
                    value={"op2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ttNbU
                      )}
                    >
                      {"Option 2"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sy1VZ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b8BT
                  )}
                >
                  {"License"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"radioGroup"}
                  data-plasmic-override={overrides.radioGroup}
                  className={classNames("__wab_instance", sty.radioGroup)}
                  defaultValue={"cc_by"}
                  onChange={generateStateOnChangeProp($state, [
                    "radioGroup",
                    "value"
                  ])}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["value"] = "cc_by";
                    __composite["0"]["label"] = "CC BY";
                    __composite["1"]["value"] = "cc_by_nc";
                    __composite["1"]["label"] = "CC BY-NC";
                    return __composite;
                  })()}
                  value={generateStateValueProp($state, [
                    "radioGroup",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__sU1NJ)}
                    value={"op1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ug6C2
                      )}
                    >
                      {"Option 1"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio__xcq6I)}
                    value={"op2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o9ZQo
                      )}
                    >
                      {"Option 2"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
              </Stack__>
            </Stack__>
          </AntdModal>
          <div className={classNames(projectcss.all, sty.freeBox__hGocC)}>
            <div className={classNames(projectcss.all, sty.freeBox__fYfBd)}>
              <div className={classNames(projectcss.all, sty.freeBox__sKkqs)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rnzeM)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"32px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/deadtrees_earth/images/baumpng.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v0B9W
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"deadtrees.earth"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mItc4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w4Yq0
                  )}
                >
                  {"Home"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9EXvb
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToAccount"] = true
                      ? (() => {
                          const actionArgs = { destination: `/account` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAccount"] != null &&
                      typeof $steps["goToAccount"] === "object" &&
                      typeof $steps["goToAccount"].then === "function"
                    ) {
                      $steps["goToAccount"] = await $steps["goToAccount"];
                    }
                  }}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#535353" }}
                    >
                      {"Account"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6Agx)}
              >
                <Button2
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  link={`/account`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["logOut"] = true
                      ? (() => {
                          const actionArgs = { continueTo: `/` };
                          return (async ({ continueTo }) => {
                            try {
                              localStorage.removeItem("plasmic_user");
                              localStorage.removeItem(
                                "$user.ezXstb24MmF1SndvtETBh2"
                              );
                            } catch (e) {}

                            if (window.__PLASMIC_AUTH_OVERRIDE) {
                              window.__PLASMIC_AUTH_OVERRIDE();
                            } else {
                              window.location.assign(
                                continueTo || window.location.href
                              );
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["logOut"] != null &&
                      typeof $steps["logOut"] === "object" &&
                      typeof $steps["logOut"].then === "function"
                    ) {
                      $steps["logOut"] = await $steps["logOut"];
                    }
                  }}
                  size={"compact"}
                >
                  {"Log Out"}
                </Button2>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0S7Xx)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aNxbT
                )}
              >
                {"Account"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fRO)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__dbOc7)}
                  displayHeight={"96px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"96px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/deadtrees_earth/images/image5Png.png",
                    fullWidth: 1467,
                    fullHeight: 1467,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__r6Pg)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fvmRa)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oGole
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentUser.properties.firstName;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Max Mustermann";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ojWF
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentUser.properties.lastName;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Max Mustermann";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a1MkQ
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentUser.email;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "TU M\u00fcnchen";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "customUpload",
    "upload",
    "button",
    "dateTimePicker",
    "radioGroup2",
    "radioGroup",
    "button2"
  ],
  modal: [
    "modal",
    "customUpload",
    "upload",
    "button",
    "dateTimePicker",
    "radioGroup2",
    "radioGroup"
  ],
  customUpload: ["customUpload"],
  upload: ["upload", "button"],
  button: ["button"],
  dateTimePicker: ["dateTimePicker"],
  radioGroup2: ["radioGroup2"],
  radioGroup: ["radioGroup"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  customUpload: typeof CustomUpload;
  upload: typeof UploadWrapper;
  button: typeof AntdButton;
  dateTimePicker: typeof AntdDatePicker;
  radioGroup2: typeof AntdRadioGroup;
  radioGroup: typeof AntdRadioGroup;
  button2: typeof Button2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccount__VariantsArgs;
    args?: PlasmicAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccount__ArgProps,
          internalVariantPropNames: PlasmicAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccount";
  } else {
    func.displayName = `PlasmicAccount.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"ezXstb24MmF1SndvtETBh2"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "ezXstb24MmF1SndvtETBh2"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAccount = Object.assign(
  // Top-level PlasmicAccount renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    customUpload: makeNodeComponent("customUpload"),
    upload: makeNodeComponent("upload"),
    button: makeNodeComponent("button"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    radioGroup: makeNodeComponent("radioGroup"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicAccount
    internalVariantProps: PlasmicAccount__VariantProps,
    internalArgProps: PlasmicAccount__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccount;
/* prettier-ignore-end */
